<#
.SYNOPSIS
    生成重构后的设计文档目录结构和文件
.DESCRIPTION
    基于MVP系统设计文档，创建分层次、模块化的文档组织结构
    将原有的单一大文档拆分为多个专题文档，提高可维护性和可读性
.AUTHOR
    Klein
.DATE
    2025-09-22
#>

param(
    [Parameter(Mandatory = $false)]
    [string]$RootPath = "docs\01_项目设计",

    [Parameter(Mandatory = $false)]
    [switch]$Force = $false
)

# 设置错误处理
$ErrorActionPreference = "Stop"

# 文档结构定义
$DocumentStructure = @{
    "README.md" = @{
        Title = "设计文档导航"
        Description = "文档结构说明和快速入门指南"
        Content = "这个文档主要负责整个设计文档体系的导航和说明，帮助读者快速了解文档结构、阅读顺序和使用方法，是整个文档体系的入口和索引。"
    }

    "01_项目设计" = @{
        "00_总体架构设计.md" = @{
            Title = "系统总体架构设计"
            Description = "系统整体架构原则、设计思想和核心理念"
            Content = "这个文档主要负责定义整个雷达MVP系统的总体架构，包括系统的分层设计、核心组件划分、技术选型原则和架构约束条件，为整个系统的详细设计提供顶层指导。"
        }
        "01_需求分析与目标.md" = @{
            Title = "需求分析与MVP目标"
            Description = "项目需求分析、MVP目标定义和验收标准"
            Content = "这个文档主要负责明确项目的业务需求、技术需求和MVP阶段的具体目标，定义系统的功能边界、性能指标和验收标准，确保开发团队对项目目标有统一认识。"
        }
        "02_技术选型与平台.md" = @{
            Title = "技术选型与硬件平台"
            Description = "硬件平台选择、软件技术栈和开发工具链"
            Content = "这个文档主要负责说明项目的技术选型决策，包括硬件平台（GPU、CPU）选择理由、软件技术栈（C++、CUDA、CMake等）的选择依据，以及开发工具链的配置方案。"
        }
        "03_系统架构总览.md" = @{
            Title = "系统架构总览"
            Description = "系统层次架构、模块关系和交互模式"
            Content = "这个文档主要负责展示系统的具体架构设计，包括各个模块的职责分工、模块间的依赖关系、数据流向和控制流程，提供系统架构的详细视图和交互模式。"
        }
        "04_核心设计原则.md" = @{
            Title = "核心设计原则"
            Description = "架构设计原则、约束条件和质量属性"
            Content = "这个文档主要负责阐述系统设计过程中必须遵循的核心原则，包括模块化设计、接口驱动开发、错误处理策略、性能优化原则等，确保整个系统设计的一致性和质量。"
        }
        "99_架构决策记录.md" = @{
            Title = "架构决策记录(ADR)"
            Description = "重要架构决策的记录和变更历史"
            Content = "这个文档主要负责记录项目开发过程中的重要架构决策，包括决策背景、备选方案、决策理由和影响分析，为后续的架构演进和问题追溯提供历史依据。"
        }
    }

    "02_模块设计" = @{
        "README.md" = @{
            Title = "模块设计总览"
            Description = "模块设计概述、导航和模块间关系"
            Content = "这个文档主要负责提供所有模块设计的总览，说明模块划分的原则、各模块的核心职责、模块间的接口关系和协作模式，是模块设计部分的导航和索引。"
        }
        "01_数据接收模块设计.md" = @{
            Title = "数据接收模块详细设计"
            Description = "UDP数据接收、数据验证和缓冲区管理的详细设计"
            Content = "这个文档主要负责数据接收模块的详细设计，包括UDP网络数据接收、数据包验证、环形缓冲区管理、数据流控制和异常处理机制，确保系统能够稳定可靠地接收外部雷达数据。"
        }
        "02_信号处理模块设计.md" = @{
            Title = "信号处理模块详细设计"
            Description = "GPU加速信号处理、算法模拟和并行计算的详细设计"
            Content = "这个文档主要负责信号处理模块的设计，包括GPU加速的FFT变换、脉冲压缩、MTI滤波等底层信号处理算法，以及CUDA并行计算的实现方案和性能优化策略。"
        }
        "03_数据处理模块设计.md" = @{
            Title = "数据处理模块详细设计"
            Description = "数据分析、CFAR检测、航迹关联等算法处理的详细设计"
            Content = "这个文档主要负责数据处理模块的设计，包括CFAR检测算法、目标提取、航迹起始、航迹关联和跟踪等高层数据处理算法，以及相关的业务逻辑处理和结果输出。"
        }
        "04_显控接口模块设计.md" = @{
            Title = "显控接口模块详细设计"
            Description = "用户界面、数据可视化和交互控制的详细设计"
            Content = "这个文档主要负责显控接口模块的设计，包括雷达数据的实时显示、用户交互界面、参数配置界面、系统状态监控和可视化组件的设计与实现。"
        }
        "05_任务调度器设计.md" = @{
            Title = "任务调度器详细设计"
            Description = "任务调度策略、生命周期管理和资源分配的详细设计"
            Content = "这个文档主要负责任务调度器的设计，包括模块生命周期管理、任务优先级调度、资源分配策略、并发控制和系统启停流程的详细实现方案。"
        }
        "06_配置管理模块设计.md" = @{
            Title = "配置管理模块详细设计"
            Description = "配置加载、运行时更新和参数管理的详细设计"
            Content = "这个文档主要负责配置管理模块的设计，包括YAML配置文件的解析、运行时配置更新、参数验证、配置热加载和配置变更通知机制的实现。"
        }
        "07_日志监控模块设计.md" = @{
            Title = "日志监控模块详细设计"
            Description = "日志记录、性能监控和系统诊断的详细设计"
            Content = "这个文档主要负责日志监控模块的设计，包括结构化日志记录、性能指标收集、系统状态监控、异常告警和诊断信息输出的实现方案。"
        }
        "99_模块集成策略.md" = @{
            Title = "模块集成策略"
            Description = "模块间集成方案、接口协调和依赖管理"
            Content = "这个文档主要负责说明各模块的集成策略，包括模块间接口设计、依赖关系管理、集成测试方案和模块协作的具体实现，确保各模块能够无缝协作。"
        }
    }

    "03_并发与调度" = @{
        "README.md" = @{
            Title = "并发设计概述"
            Description = "并发架构总览、线程模型和调度策略概述"
            Content = "这个文档主要负责系统并发设计的总体说明，包括多线程架构、任务调度框架、同步机制选择和GPU并发计算的整体策略，为并发相关的详细设计提供指导。"
        }
        "01_并发架构设计.md" = @{
            Title = "整体并发架构设计"
            Description = "并发架构模式、线程模型选择和同步策略"
            Content = "这个文档主要负责系统并发架构的设计，包括生产者-消费者模式、线程池架构、任务队列设计和模块间并发协作机制，确保系统的高性能和线程安全。"
        }
        "02_任务调度策略.md" = @{
            Title = "任务调度算法和策略"
            Description = "调度算法设计、优先级管理和负载均衡机制"
            Content = "这个文档主要负责任务调度算法的详细设计，包括优先级队列、时间片轮转、工作窃取算法和动态负载均衡策略，保证系统资源的高效利用。"
        }
        "03_线程模型设计.md" = @{
            Title = "线程池和线程管理"
            Description = "线程池架构、工作窃取算法和线程生命周期管理"
            Content = "这个文档主要负责线程管理机制的设计，包括线程池的创建与销毁、线程数量动态调整、工作线程的任务分配和线程间负载均衡的实现。"
        }
        "04_同步机制设计.md" = @{
            Title = "同步原语和机制"
            Description = "锁策略、原子操作、无锁编程和同步优化"
            Content = "这个文档主要负责线程同步机制的设计，包括互斥锁、读写锁、条件变量、原子操作和无锁数据结构的选择与使用，确保数据访问的安全性和性能。"
        }
        "05_GPU资源管理.md" = @{
            Title = "GPU计算资源调度"
            Description = "GPU资源分配、内存管理和计算流调度"
            Content = "这个文档主要负责GPU计算资源的管理，包括CUDA流的创建与调度、GPU内存分配与回收、计算任务的并行执行和GPU与CPU的协同工作机制。"
        }
        "06_性能优化策略.md" = @{
            Title = "并发性能优化"
            Description = "性能瓶颈分析、优化策略和调优指南"
            Content = "这个文档主要负责并发性能的优化策略，包括性能瓶颈识别、缓存优化、内存访问模式优化、并发度调优和系统性能监控与分析方法。"
        }
    }

    "04_数据架构" = @{
        "README.md" = @{
            Title = "数据架构概述"
            Description = "数据架构总览、设计原则和关键概念"
            Content = "这个文档主要负责数据架构的总体设计，包括数据流向、数据格式标准、存储策略和数据生命周期管理，为系统的数据处理提供统一的架构指导。"
        }
        "01_数据流设计.md" = @{
            Title = "端到端数据流设计"
            Description = "数据流路径、处理管道和流量控制机制"
            Content = "这个文档主要负责系统数据流的设计，包括从数据接收到结果输出的完整数据流路径、各处理阶段的数据转换和流量控制机制，确保数据的有序流动。"
        }
        "02_数据结构定义.md" = @{
            Title = "核心数据结构定义"
            Description = "数据类型定义、结构设计和内存布局优化"
            Content = "这个文档主要负责定义系统中使用的核心数据结构，包括复数数据类型、信号数据容器、目标信息结构和配置参数结构，以及内存对齐和缓存友好的设计。"
        }
        "03_数据格式规范.md" = @{
            Title = "数据格式和协议规范"
            Description = "数据序列化、传输协议和格式转换"
            Content = "这个文档主要负责数据格式的标准化，包括网络传输的数据格式、文件存储格式、模块间数据交换格式和数据序列化协议，确保数据的一致性和互操作性。"
        }
        "04_缓冲区管理.md" = @{
            Title = "缓冲区设计和管理"
            Description = "环形缓冲区、内存池和缓存策略"
            Content = "这个文档主要负责缓冲区管理机制的设计，包括环形缓冲区的实现、内存池的分配策略、缓存一致性保证和内存回收机制，优化系统的内存使用效率。"
        }
        "05_数据传输协议.md" = @{
            Title = "模块间数据传输"
            Description = "模块间通信协议、数据传输优化和错误处理"
            Content = "这个文档主要负责模块间数据传输的协议设计，包括数据传输接口、传输性能优化、数据完整性检查和传输错误的处理与恢复机制。"
        }
        "06_数据完整性保障.md" = @{
            Title = "数据验证和完整性"
            Description = "数据校验、完整性检查和错误恢复机制"
            Content = "这个文档主要负责数据完整性的保障机制，包括数据校验算法、完整性检测方法、数据损坏的检测与修复和数据一致性维护策略。"
        }
    }

    "05_接口设计" = @{
        "README.md" = @{
            Title = "接口设计概述"
            Description = "接口设计原则、规范和最佳实践"
            Content = "这个文档主要负责接口设计的总体规范，包括接口设计原则、命名约定、版本管理策略和最佳实践，为所有接口的设计和实现提供指导。"
        }
        "01_模块接口规范.md" = @{
            Title = "模块间接口规范"
            Description = "接口定义标准、调用约定和错误处理"
            Content = "这个文档主要负责模块间接口的规范设计，包括IModule接口的实现、函数签名定义、ErrorCode返回值规范和接口调用约定，确保模块间的一致性。"
        }
        "02_外部接口设计.md" = @{
            Title = "对外API和服务接口"
            Description = "外部API设计、服务接口和集成规范"
            Content = "这个文档主要负责系统对外API的设计，包括REST API接口、配置管理接口、状态查询接口和第三方系统集成规范，支持系统的外部集成。"
        }
        "03_配置接口设计.md" = @{
            Title = "配置管理接口"
            Description = "配置接口规范、参数管理和动态更新"
            Content = "这个文档主要负责配置管理接口的设计，包括ConfigManager接口定义、配置项的读写接口、运行时配置更新机制和配置变更通知接口。"
        }
        "04_监控接口设计.md" = @{
            Title = "监控和诊断接口"
            Description = "监控接口设计、指标收集和诊断功能"
            Content = "这个文档主要负责监控和诊断接口的设计，包括性能指标收集接口、系统状态查询接口、日志访问接口和诊断信息导出功能。"
        }
        "05_接口版本管理.md" = @{
            Title = "接口版本控制"
            Description = "接口版本管理、兼容性保证和演进策略"
            Content = "这个文档主要负责接口版本管理策略，包括版本号规范、向后兼容性保证、接口废弃流程和平滑升级策略，确保系统演进的稳定性。"
        }
    }

    "06_测试设计" = @{
        "README.md" = @{
            Title = "测试总体规划"
            Description = "测试策略概述、测试金字塔和质量目标"
            Content = "这个文档主要负责整个测试体系的规划，包括测试策略制定、测试金字塔设计、质量目标定义和测试资源分配，为项目的质量保证提供总体框架。"
        }
        "01_测试策略.md" = @{
            Title = "整体测试策略"
            Description = "测试方法论、测试分层和质量保证策略"
            Content = "这个文档主要负责制定测试策略和方法论，包括单元测试、集成测试、系统测试的分层设计、测试覆盖率要求和自动化测试策略。"
        }
        "02_单元测试计划.md" = @{
            Title = "单元测试设计"
            Description = "单元测试策略、覆盖率目标和测试用例设计"
            Content = "这个文档主要负责单元测试的详细设计，包括使用GoogleTest框架的测试用例编写、Mock对象设计、代码覆盖率目标和持续集成中的测试执行。"
        }
        "03_集成测试计划.md" = @{
            Title = "集成测试设计"
            Description = "集成测试场景、模块协作测试和接口测试"
            Content = "这个文档主要负责集成测试的设计，包括模块间接口测试、数据流集成测试、GPU与CPU协作测试和端到端的系统集成验证。"
        }
        "04_性能测试计划.md" = @{
            Title = "性能测试设计"
            Description = "性能测试指标、基准测试和压力测试设计"
            Content = "这个文档主要负责性能测试的设计，包括实时处理性能指标、GPU计算性能基准、内存使用效率测试和系统负载压力测试。"
        }
        "05_可靠性测试计划.md" = @{
            Title = "可靠性测试设计"
            Description = "可靠性测试、故障注入和恢复测试设计"
            Content = "这个文档主要负责可靠性测试的设计，包括系统稳定性测试、故障注入测试、异常恢复测试和长时间运行的可靠性验证。"
        }
        "06_测试数据管理.md" = @{
            Title = "测试数据准备"
            Description = "测试数据生成、管理和维护策略"
            Content = "这个文档主要负责测试数据的管理，包括雷达信号测试数据的生成、测试场景数据的准备、测试数据的版本管理和测试环境的数据配置。"
        }
    }

    "07_质量保障" = @{
        "README.md" = @{
            Title = "质量保障体系"
            Description = "质量管理概述、标准和最佳实践"
            Content = "这个文档主要负责质量保障体系的建立，包括质量管理流程、代码质量标准、评审机制和持续改进策略，确保项目交付的高质量。"
        }
        "01_编码规范.md" = @{
            Title = "代码规范和标准"
            Description = "编码风格、命名规范和代码质量标准"
            Content = "这个文档主要负责制定编码规范，包括C++17编码风格、命名约定、注释规范、代码格式化标准和静态代码分析规则。"
        }
        "02_代码评审流程.md" = @{
            Title = "代码评审标准"
            Description = "代码评审流程、检查清单和质量门禁"
            Content = "这个文档主要负责代码评审流程的设计，包括Pull Request评审标准、代码检查清单、评审角色分工和质量门禁机制。"
        }
        "03_质量度量标准.md" = @{
            Title = "质量指标和度量"
            Description = "质量指标定义、度量方法和改进策略"
            Content = "这个文档主要负责质量度量体系的建立，包括代码质量指标、测试覆盖率指标、缺陷密度统计和质量改进的量化方法。"
        }
        "04_缺陷管理流程.md" = @{
            Title = "缺陷跟踪和处理"
            Description = "缺陷管理流程、优先级分类和处理规范"
            Content = "这个文档主要负责缺陷管理流程的设计，包括缺陷报告规范、优先级分类标准、缺陷处理流程和缺陷跟踪工具的使用。"
        }
        "05_发布质量控制.md" = @{
            Title = "发布质量检查"
            Description = "发布前质量检查清单、验收标准和发布流程"
            Content = "这个文档主要负责发布质量控制，包括发布前检查清单、验收测试标准、发布流程规范和发布后的质量监控机制。"
        }
    }

    "08_项目管理" = @{
        "README.md" = @{
            Title = "项目管理概述"
            Description = "项目管理方法、流程和工具概述"
            Content = "这个文档主要负责项目管理体系的建立，包括项目管理方法论、工作流程设计、团队协作模式和项目工具的选择与配置。"
        }
        "01_开发计划.md" = @{
            Title = "详细开发计划"
            Description = "开发时间表、里程碑和交付计划"
            Content = "这个文档主要负责制定详细的开发计划，包括MVP开发时间表、关键里程碑设定、模块开发优先级排序和交付物清单。"
        }
        "02_团队协作规范.md" = @{
            Title = "团队协作流程"
            Description = "协作规范、沟通机制和角色分工"
            Content = "这个文档主要负责团队协作规范的制定，包括角色职责定义、沟通机制设计、会议制度安排和协作工具的使用规范。"
        }
        "03_风险管理计划.md" = @{
            Title = "风险识别和应对"
            Description = "风险分析、应对策略和应急预案"
            Content = "这个文档主要负责项目风险管理，包括技术风险识别、进度风险评估、资源风险分析和相应的应对策略与应急预案。"
        }
        "04_变更管理流程.md" = @{
            Title = "需求变更管理"
            Description = "变更流程、影响分析和决策机制"
            Content = "这个文档主要负责变更管理流程的设计，包括需求变更申请流程、影响分析方法、变更决策机制和变更实施的跟踪控制。"
        }
        "05_进度跟踪机制.md" = @{
            Title = "进度监控和报告"
            Description = "进度跟踪方法、报告机制和偏差处理"
            Content = "这个文档主要负责进度跟踪机制的建立，包括进度监控方法、报告制度设计、进度偏差分析和纠偏措施的制定与执行。"
        }
    }

    "09_部署运维" = @{
        "README.md" = @{
            Title = "部署运维概述"
            Description = "部署策略、运维模式和工具链概述"
            Content = "这个文档主要负责部署运维体系的设计，包括部署策略制定、运维模式选择、监控体系建设和运维工具链的配置与管理。"
        }
        "01_环境搭建指南.md" = @{
            Title = "环境搭建指南"
            Description = "开发、测试、生产环境的搭建和配置"
            Content = "这个文档主要负责各种环境的搭建指导，包括开发环境配置、测试环境部署、生产环境搭建和GPU驱动、CUDA环境的安装配置。"
        }
        "02_构建部署流程.md" = @{
            Title = "构建和部署流程"
            Description = "构建流水线、部署策略和自动化脚本"
            Content = "这个文档主要负责构建部署流程的设计，包括CMake构建流水线、自动化部署脚本、版本发布流程和部署回滚机制。"
        }
        "03_运维监控方案.md" = @{
            Title = "生产环境监控"
            Description = "系统监控、告警机制和运维工具"
            Content = "这个文档主要负责生产环境监控方案的设计，包括系统性能监控、GPU使用率监控、告警机制配置和运维工具的选择与部署。"
        }
        "04_故障处理手册.md" = @{
            Title = "故障诊断和处理"
            Description = "常见故障分析、诊断方法和处理步骤"
            Content = "这个文档主要负责故障处理手册的编写，包括常见故障类型分析、诊断方法指导、处理步骤说明和故障预防措施。"
        }
        "05_性能调优指南.md" = @{
            Title = "性能监控和调优"
            Description = "性能监控指标、调优策略和优化指南"
            Content = "这个文档主要负责性能调优指导，包括性能监控指标设计、GPU性能调优策略、内存优化方案和系统整体性能优化指南。"
        }
    }

    "10_未来规划" = @{
        "README.md" = @{
            Title = "未来规划概述"
            Description = "系统演进方向、技术路线图和长期规划"
            Content = "这个文档主要负责系统未来发展规划，包括技术演进路线图、功能扩展规划、架构演进策略和长期技术债务管理计划。"
        }
        "01_MVP后续迭代.md" = @{
            Title = "MVP验证后迭代"
            Description = "MVP验证结果分析和后续迭代计划"
            Content = "这个文档主要负责MVP后续迭代规划，包括MVP验证结果分析、用户反馈收集、功能优先级重新评估和下一阶段迭代计划。"
        }
        "02_功能扩展路线图.md" = @{
            Title = "功能扩展路线图"
            Description = "功能演进规划、版本路线图和特性优先级"
            Content = "这个文档主要负责功能扩展规划，包括新功能开发路线图、版本发布计划、特性优先级排序和功能依赖关系分析。"
        }
        "03_技术演进规划.md" = @{
            Title = "技术栈演进规划"
            Description = "技术栈升级计划、新技术引入和迁移策略"
            Content = "这个文档主要负责技术栈演进规划，包括C++标准升级、CUDA版本迁移、第三方库更新和新技术引入的评估与实施计划。"
        }
        "04_扩展性设计.md" = @{
            Title = "系统扩展性设计"
            Description = "水平扩展、垂直扩展和性能扩展设计"
            Content = "这个文档主要负责系统扩展性设计，包括分布式部署方案、多GPU扩展策略、云原生改造规划和性能扩展的架构设计。"
        }
        "05_长期维护计划.md" = @{
            Title = "长期维护规划"
            Description = "维护策略、技术债务管理和生命周期规划"
            Content = "这个文档主要负责长期维护规划，包括代码维护策略、技术债务管理、文档维护计划和系统生命周期管理。"
        }
    }

    "11_参考资料" = @{
        "README.md" = @{
            Title = "参考资料索引"
            Description = "技术资料、标准规范和学习资源索引"
            Content = "这个文档主要负责参考资料的整理和索引，包括技术文档链接、标准规范引用、学习资源推荐和相关工具资料的分类整理。"
        }
        "01_技术标准规范.md" = @{
            Title = "相关技术标准"
            Description = "行业标准、技术规范和最佳实践参考"
            Content = "这个文档主要负责收集相关技术标准，包括雷达信号处理标准、C++编程规范、CUDA编程最佳实践和软件工程标准的参考链接。"
        }
        "02_最佳实践参考.md" = @{
            Title = "行业最佳实践"
            Description = "同类系统案例分析、经验总结和借鉴参考"
            Content = "这个文档主要负责收集行业最佳实践，包括同类雷达系统案例分析、开源项目参考、架构模式借鉴和开发经验总结。"
        }
        "03_工具使用指南.md" = @{
            Title = "开发工具指南"
            Description = "开发工具使用说明、配置指南和技巧分享"
            Content = "这个文档主要负责开发工具的使用指导，包括CMake使用技巧、调试工具配置、性能分析工具使用和开发环境优化建议。"
        }
        "04_术语表.md" = @{
            Title = "专业术语表"
            Description = "项目相关专业术语、缩略语和定义说明"
            Content = "这个文档主要负责维护专业术语表，包括雷达技术术语、计算机术语、项目特定缩略语和技术概念的定义与解释。"
        }
        "05_学习资源.md" = @{
            Title = "学习资源推荐"
            Description = "相关技术学习资源、书籍推荐和在线资料"
            Content = "这个文档主要负责学习资源的推荐，包括技术书籍推荐、在线课程链接、技术博客收藏和开发社区资源的整理。"
        }
    }

    "templates" = @{
        "module_design_template.md" = @{
            Title = "模块设计文档模板"
            Description = "标准化模块设计文档模板和填写指南"
            Content = "这个文档主要负责提供模块设计的标准模板，包括模块设计文档的标准结构、章节要求、内容指导和文档编写的最佳实践。"
        }
        "test_plan_template.md" = @{
            Title = "测试计划文档模板"
            Description = "测试计划文档标准模板和使用说明"
            Content = "这个文档主要负责提供测试计划的标准模板，包括测试计划文档的格式规范、测试用例编写模板和测试报告的标准格式。"
        }
        "interface_spec_template.md" = @{
            Title = "接口规范文档模板"
            Description = "接口设计规范文档模板和示例"
            Content = "这个文档主要负责提供接口规范的标准模板，包括接口文档的编写格式、API文档的结构规范和接口设计的文档化要求。"
        }
        "adr_template.md" = @{
            Title = "架构决策记录模板"
            Description = "架构决策记录(ADR)标准模板和使用指南"
            Content = "这个文档主要负责提供架构决策记录的标准模板，包括ADR的编写格式、决策记录的结构要求和架构决策文档化的最佳实践。"
        }
    }
}

function Write-Log {
    param([string]$Message, [string]$Level = "INFO")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $color = switch ($Level) {
        "ERROR" { "Red" }
        "WARN" { "Yellow" }
        "SUCCESS" { "Green" }
        default { "White" }
    }
    Write-Host "[$timestamp] [$Level] $Message" -ForegroundColor $color
}

function New-DocumentFile {
    param(
        [string]$FilePath,
        [string]$Title,
        [string]$Description,
        [string]$Content = "",
        [bool]$IsDirectory = $false
    )

    if ($IsDirectory) {
        if (-not (Test-Path $FilePath)) {
            New-Item -ItemType Directory -Path $FilePath -Force | Out-Null
            Write-Log "创建目录: $FilePath" "SUCCESS"
        }
        return
    }

    $directory = Split-Path -Parent $FilePath
    if ($directory -and -not (Test-Path $directory)) {
        New-Item -ItemType Directory -Path $directory -Force | Out-Null
    }

    if ((Test-Path $FilePath) -and -not $Force) {
        Write-Log "文件已存在，跳过: $FilePath" "WARN"
        return
    }

    $documentContent = Generate-DocumentContent -Title $Title -Description $Description -FilePath $FilePath -Content $Content

    $documentContent | Out-File -FilePath $FilePath -Encoding UTF8 -Force
    Write-Log "创建文件: $FilePath" "SUCCESS"
}function Generate-DocumentContent {
    param(
        [string]$Title,
        [string]$Description,
        [string]$FilePath,
        [string]$Content = ""
    )

    # 如果没有提供Content，使用默认描述
    if ([string]::IsNullOrEmpty($Content)) {
        $Content = $Description
    }

    $contentText = @"
## 文档职责

$Content
"@

    return $contentText
}

function Create-DocumentStructure {
    param([hashtable]$Structure, [string]$BasePath = "")

    foreach ($key in $Structure.Keys) {
        $currentPath = if ($BasePath) { Join-Path $BasePath $key } else { Join-Path $RootPath $key }

        if ($Structure[$key] -is [hashtable]) {
            if ($Structure[$key].ContainsKey("Title")) {
                # 这是一个文件
                $content = if ($Structure[$key].ContainsKey("Content")) { $Structure[$key].Content } else { $Structure[$key].Description }
                New-DocumentFile -FilePath $currentPath -Title $Structure[$key].Title -Description $Structure[$key].Description -Content $content
            } else {
                # 这是一个目录
                New-DocumentFile -FilePath $currentPath -Title "" -Description "" -Content "" -IsDirectory $true
                Create-DocumentStructure -Structure $Structure[$key] -BasePath $currentPath
            }
        }
    }
}function Main {
    Write-Log "开始生成MVP设计文档重构结构..." "INFO"
    Write-Log "目标路径: $RootPath" "INFO"

    if ($Force) {
        Write-Log "强制模式已启用，将覆盖已存在的文件" "WARN"
    }

    try {
        # 确保根目录存在
        if (-not (Test-Path $RootPath)) {
            New-Item -ItemType Directory -Path $RootPath -Force | Out-Null
            Write-Log "创建根目录: $RootPath" "SUCCESS"
        }

        # 创建文档结构
        Create-DocumentStructure -Structure $DocumentStructure

        Write-Log "文档结构生成完成！" "SUCCESS"
        Write-Log "总共创建了约 $(($DocumentStructure.GetEnumerator() | ForEach-Object { if ($_.Value -is [hashtable]) { $_.Value.Count } else { 1 } } | Measure-Object -Sum).Sum) 个文件/目录" "INFO"

        # 生成结构总览
        $overviewPath = Join-Path $RootPath "文档结构总览.md"
        Generate-StructureOverview | Out-File -FilePath $overviewPath -Encoding UTF8 -Force
        Write-Log "生成结构总览: $overviewPath" "SUCCESS"

    } catch {
        Write-Log "生成过程中发生错误: $($_.Exception.Message)" "ERROR"
        throw
    }
}

function Generate-StructureOverview {
    $overview = @"
# MVP设计文档结构总览

**生成时间**: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
**文档版本**: v1.0.0

---

## 文档重构说明

本文档结构是基于原有MVP系统设计文档的重构结果，采用分层次、模块化的组织方式，将原有的单一大文档拆分为多个专题文档，提高了可维护性和可读性。

### 重构原则

1. **分层组织**: 按照系统设计的逻辑层次组织文档
2. **模块独立**: 每个模块的设计文档相对独立
3. **版本友好**: 细粒度的文件分割便于版本控制
4. **职责清晰**: 每个文档都有明确的职责范围

---

## 目录结构

\`\`\`
docs/
├── README.md                                    # 文档导航和快速入门
├── 01_项目设计/                                # 项目设计主目录
│   ├── 00_总体架构设计.md                       # 系统整体架构和设计原则
│   ├── 01_需求分析与目标.md                     # 项目需求分析和MVP目标定义
│   ├── 02_技术选型与平台.md                     # 硬件软件选型和技术栈选择
│   ├── 03_系统架构总览.md                       # 系统层次架构和模块关系
│   ├── 04_核心设计原则.md                       # 设计原则和约束条件
│   └── 99_架构决策记录.md                       # 架构决策记录(ADR)和变更历史
├── 02_模块设计/                                # 模块详细设计
│   ├── README.md                               # 模块设计总览和导航
│   ├── 01_数据接收模块设计.md                   # 数据接收模块详细设计
│   ├── 02_信号处理模块设计.md                   # 信号处理模块详细设计 ⭐新增
│   ├── 03_数据处理模块设计.md                   # 数据处理模块详细设计 ⭐拆分后
│   ├── 04_显控接口模块设计.md                   # 显示控制模块详细设计
│   ├── 05_任务调度器设计.md                     # 任务调度器详细设计
│   ├── 06_配置管理模块设计.md                   # 配置管理模块详细设计
│   ├── 07_日志监控模块设计.md                   # 日志和监控模块详细设计
│   └── 99_模块集成策略.md                       # 模块间集成和接口协调
├── 03_并发与调度/                              # 任务调度和线程管理
├── 04_数据架构/                                # 数据结构和数据流
├── 05_接口设计/                                # 接口和API设计
├── 06_测试设计/                                # 测试策略和计划
├── 07_质量保障/                                # 质量管理和标准
├── 08_项目管理/                                # 项目管理和计划
├── 09_部署运维/                                # 部署和运维
├── 10_未来规划/                                # 后续工作和规划
├── 11_参考资料/                                # 参考文档和资源
└── templates/                                  # 文档模板
\`\`\`

---

## 关键变更说明

### 🔄 模块拆分调整

**原数据处理模块拆分为两个独立模块**:

1. **信号处理模块** (`02_信号处理模块设计.md`)
   - GPU加速信号处理
   - 算法模拟和并行计算
   - 底层信号处理算法
   - 性能优化和GPU资源管理

2. **数据处理模块** (`03_数据处理模块设计.md`)
   - 数据分析和后处理
   - CFAR检测算法
   - 航迹关联和跟踪
   - 业务逻辑处理

**拆分理由**:
- 职责分离: 信号处理侧重计算性能，数据处理侧重业务逻辑
- 并发优化: 支持不同的并发策略和优化方法
- 团队协作: 便于不同专业背景团队成员的分工
- 技术演进: 为后续算法升级提供更灵活的架构

---

## 文档层次说明

### L1 - 项目总览层 (01_项目设计/)
项目整体视图和设计决策，为其他文档提供上下文和指导原则。

### L2 - 架构设计层 (02-05/)
系统核心架构的详细设计，各个技术领域的深入分析。

### L3 - 实施保障层 (06-08/)
确保项目成功实施的支撑体系，质量控制和项目管理流程。

### L4 - 运维扩展层 (09-10/)
系统交付后的运维和演进，长期技术规划和扩展策略。

### L5 - 支撑资源层 (11/, templates/)
开发过程中的参考资源，标准化的文档模板。

---

## 使用指南

### 📖 阅读顺序建议

**新团队成员**:
1. README.md (快速了解)
2. 01_项目设计/ (理解项目背景)
3. 02_模块设计/ (了解模块结构)
4. 对应专业领域文档

**开发人员**:
1. 对应模块设计文档
2. 03_并发与调度/ (了解并发设计)
3. 04_数据架构/ (理解数据流)
4. 05_接口设计/ (接口规范)

**项目管理**:
1. 08_项目管理/ (管理流程)
2. 06_测试设计/ (质量保证)
3. 09_部署运维/ (交付部署)
4. 10_未来规划/ (长期规划)

### ✏️ 维护指南

1. **内容更新**: 及时更新文档内容，保持与代码同步
2. **版本管理**: 重要变更需要更新版本号和变更记录
3. **交叉引用**: 维护文档间的引用关系，确保链接有效
4. **模板使用**: 新增文档请使用 templates/ 中的标准模板

---

## 后续工作

### 🚧 待完善内容

1. **内容迁移**: 将原MVP文档内容按模块迁移到对应文档
2. **架构图更新**: 更新架构图以反映信号处理和数据处理的拆分
3. **接口重新设计**: 重新设计拆分后模块间的接口
4. **测试策略调整**: 调整测试策略以适应新的模块结构

### 📋 优先级排序

1. **高优先级**: 核心模块设计文档 (02_模块设计/)
2. **中优先级**: 并发设计和数据架构 (03-04/)
3. **低优先级**: 部署运维和未来规划 (09-10/)

---

## 联系方式

- **文档维护**: [维护团队联系方式]
- **技术讨论**: [技术讨论渠道]
- **问题反馈**: [问题反馈渠道]

---

*本文档结构由自动化脚本生成，请根据项目实际情况调整和完善。*
"@

    return $overview
}

# 执行主函数
Main
